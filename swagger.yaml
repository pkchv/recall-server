swagger: '2.0'
info:
  version: '1'
  title: .
  description: Recall (spaced repetition software) backend service
basePath: /
tags:
  - name: Users
    description: User management
  - name: Authentication
    description: Authentication system endpoints
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  bearerAuth:
    type: apiKey
    in: header
    name: Bearer
definitions:
  Error400:
    type: object
    title: error400
    required:
      - statusCode
      - error
      - message
    properties:
      statusCode:
        type: number
        example: 400
      error:
        type: string
        example: "Bad Request"
      message:
        type: string
        example: "Malformed body."
  Error403:
    type: object
    title: error403
    required:
      - statusCode
      - error
      - message
    properties:
      statusCode:
        type: number
        example: 403
      error:
        type: string
        example: "Unauthorized"
      message:
        type: string
        example: "You are not authorized to access this resource."
  Error404:
    type: object
    title: error404
    required:
      - statusCode
      - error
      - message
    properties:
      statusCode:
        type: number
        example: 404
      error:
        type: string
        example: "Not Found"
      message:
        type: string
        example: "Requested resource was not found."
  Error409:
    type: object
    title: error409
    required:
      - statusCode
      - error
      - message
    properties:
      statusCode:
        type: number
        example: 409
      error:
        type: string
        example: "Conflict"
      message:
        type: string
        example: "Resource with provided id is already in use."
  LoginRequest:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        example: "user123"
      password:
        type: string
        example: "Password0"
  RegisterRequest:
    type: object
    required:
      - username
      - password
      - email
    properties:
      username:
        type: string
        example: "user123"
      password:
        type: string
        example: "Password0"
      email:
        type: string
        example: "user@domain.com"
  LoginResponse:
    type: object
    required:
      - token
    properties:
      token:
        type: string
        example: "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ"
  UserResponse:
    type: object
    required:
      - id
      - username
      - email
    properties:
      id:
        type: number
        example: 1
      username:
        type: string
        example: "user123"
      email:
        type: string
        example: "user@domain.com"
paths:
  /login:
    post:
      tags:
        - Authentication
      description: Authenticates a user
      parameters:
        - name: login_object
          in: body
          description: Login object
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '400':
          description: Malformed body payload
          schema:
            $ref: '#/definitions/Error400'
        '403':
          description: Incorrect password
          schema:
            $ref: '#/definitions/Error403'
        '404':
          description: User does not exist
          schema:
            $ref: '#/definitions/Error404'
        '200':
          description: Returns an object with JSON Web Token
          schema:
            $ref: '#/definitions/LoginResponse'
  /register:
    post:
      tags:
        - Users
      description: Creates a new user
      parameters:
        - name: register_object
          in: body
          description: Register object
          required: true
          schema:
            $ref: '#/definitions/RegisterRequest'
      responses:
        '200':
          description: User is created
        '400':
          description: Malformed body payload
          schema:
            $ref: '#/definitions/Error400'
        '409':
          description: Username or email is already taken
          schema:
            $ref: '#/definitions/Error409'
  /user:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Retrieves user data
      responses:
        '200':
          description: Return user data
          schema:
            $ref: '#/definitions/UserResponse'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error403'